# Generate configuration files

###################### Parameter container

function GenerateInputsInfo(){
	len=${#Inputs_Name[@]}
	echo "/*This file is generated by Bash-script.*/"
	echo ""

	echo "In this file, you can find the introductions for all parameter."
	echo ""
	echo ""
	for (( i=0;i<len;i++ ))
	do
		if [ ${Inputs_Type[i]} == "char" ]
		then
			Dim=${Inputs_Dim[i]}
			echo "Name:	${Inputs_Name[i]}"
			echo "Type:	${Inputs_Type[i]}	"
			echo "Length: This is a string! Its maxium length is ${Dim}!"
			echo "Information:	${Inputs_Info[i]}"
			echo "#########################################################"
			echo ""
			echo ""
		else
			Dim=${Inputs_Dim[i]}
#			Dim=${Array_Len[i]#[}
#			Dim=${Dim%]}
			echo "Name:	${Inputs_Name[i]}"
			echo "Type:	${Inputs_Type[i]}	"
			echo "Length: ${Dim}"
			echo "Information:	${Inputs_Info[i]}"
			echo "#########################################################"
			echo ""
			echo ""
		fi
	done
}

GenerateInputsInfo > ${DOC_DIR}/Parameters.txt

function GenerateLualib_Setting(){
	echo "--This file is generated by Bash-script"
	echo ""
cat <<_EOF
function GAPS_APT_LuaConfig_ScriptPath()
	return debug.getinfo(2,"S").source:sub(2)
end

C_LIGHT =2.99792458e8;
EPSILON0= 8.854187818e-12;
MU0= 12.5663706144e-7;
QE =1.60217733e-19;
ME =9.10938215e-31;
SMALL_ENOUGH=1e-15;
M_PI=3.14159265358979323846;

function GAPS_APT_LuaConfig_LoadUnits(B0)
	Unit_B=B0;
	Unit_E=B0*C_LIGHT;
	Omega_ce=QE*Unit_B/ME;
	Unit_Time = 1/Omega_ce;
	Unit_Space= ME*C_LIGHT/(QE*Unit_B);
	Unit_P=ME*C_LIGHT;
	Unit_V=C_LIGHT;
	Unit_A=ME*C_LIGHT/QE;
	Unir_Phi=Unit_A*C_LIGHT;
	Unit_Energy=ME*C_LIGHT*C_LIGHT;
end
_EOF
	len=${#Inputs_Name[@]}
	for (( i=0;i<len;i++ ))
	do
		if [ ${Inputs_Type[i]} == "char" ]
		then
			echo "${Inputs_Name[i]} = \"c\";";
		else
			if [ ${Inputs_Dim[i]} == "1" ]
			then
				echo "${Inputs_Name[i]} = 0;";
			else 
				ArrayElm="0"
				for (( j=1;j<${Inputs_Dim[i]};j++ ))
				do
					ArrayElm="$ArrayElm ,0"
				done
				echo "${Inputs_Name[i]} = {$ArrayElm};";
			fi
		fi
	done
}

GenerateLualib_Setting> ${CONFIG_DIR}/Setting.lua

## generate headers and functions

function GenerateIOTools(){
	echo "/*This file is generated by Bash-script.*/"
	echo ""
	echo "typedef struct{"

	len=${#Inputs_Name[@]}
	for (( i=0;i<len;i++ ))
	do
		if [ ${Inputs_Dim[i]} == "1" ]
		then
			echo "	${Inputs_Type[i]}		${Inputs_Name[i]};"
		else
			echo "	${Inputs_Type[i]}		${Inputs_Name[i]}[${Inputs_Dim[i]}];";
		fi
	done
	echo "}Gaps_IO_InputsContainer;"
	echo ""
	echo "int GAPS_IO_LoadLua2C(Gaps_IO_LuaInputEnv *pLuaenv,Gaps_IO_InputsContainer *pInputs);"
	echo "int GAPS_IO_GenCalInfoMfile(char *filename,Gaps_IO_InputsContainer *pInputs);"
	echo "int GAPS_IO_GenCalInfoPython(char *filename,Gaps_IO_InputsContainer *pInputs);"

}

GenerateIOTools > ${HEADER_DIR}/IO_Tools.h


function GenerateLoadLua2C(){
	echo "/*This file is generated by Bash-script.*/"
	echo ""
len=${#Inputs_Name[@]}
cat <<_EOF
#include <stdio.h>
#include <stdlib.h>
#include "lua.h"
#include "lualib.h"
#include "lauxlib.h"
#include "gapsio.h"
#include "IO_Tools.h"
int GAPS_IO_LoadLua2C(Gaps_IO_LuaInputEnv *pLuaenv,Gaps_IO_InputsContainer *pInputs)
{
_EOF

for((i=0;i<len;i++))
do
	if [ ${Inputs_Type[i]} == "char" ] 
	then
		ovar="pInputs->${Inputs_Name[i]}"
		ToCtype=string
	else
		if [ ${Inputs_Dim[i]} == "1" ]
		then
			ovar="&(pInputs->${Inputs_Name[i]})"
			ToCtype=${Inputs_Type[i]}
		else
			ovar="${Inputs_Dim[i]},pInputs->${Inputs_Name[i]}"
			ToCtype=table
		fi
	fi

	if [ ${Inputs_Type[i]} == "int" ] || [ ${Inputs_Type[i]} == "long" ] || [ ${Inputs_Type[i]} == "size_t" ]
	then
		ToCtype="long"
	fi

	if [ ${Inputs_Type[i]} == "float" ] 
	then
		ToCtype="double"
	fi

cat <<_EOF
	GAPS_IO_Load_${ToCtype}(pLuaenv,"${Inputs_Name[i]}",$ovar);
_EOF
done
echo "return 0;"
echo "}"
}

function GenerateGenCalInfoMfile(){
	echo ""
len=${#Inputs_Name[@]}
cat <<_EOF
int GAPS_IO_GenCalInfoMfile(char *filename,Gaps_IO_InputsContainer *pInputs)
{
	FILE *pf=fopen(filename,"w");	
	long i;
	fprintf(pf,"function y=GAPS_IO_LoadCalInfo()\n");
_EOF

for((i=0;i<len;i++))
do
	In_Name=${Inputs_Name[i]}
	Dim=${Inputs_Dim[i]}
	if [ ${Inputs_Type[i]} == "char" ] 
	then
		echo "	fprintf(pf,\"\\ty.%s = \'%s\';\\n\", \"$In_Name\",pInputs->$In_Name);"
	else
		if [ $Dim == "1" ]
		then
			if [ ${Inputs_Type[i]} == "double" ] || [ ${Inputs_Type[i]} == "float" ]
			then
				echo "	fprintf(pf,\"\\ty.%s = %e;\\n\", \"$In_Name\",pInputs->$In_Name);"
			else
				echo "	fprintf(pf,\"\\ty.%s = %ld;\\n\", \"$In_Name\",pInputs->$In_Name);"
			fi
		else
			if [ ${Inputs_Type[i]} == "double" ] || [ ${Inputs_Type[i]} == "float" ]
			then
				echo "	fprintf(pf,\"\\ty.%s = [\",\"$In_Name\");"
				echo "	for(i=0;i<$Dim;i++){fprintf(pf,\"%e \",pInputs->$In_Name[i]);}"
				echo "	fprintf(pf,\"];\\n\");"
			else
				echo "	fprintf(pf,\"\\ty.%s = [\",\"$In_Name\");"
				echo "	for(i=0;i<$Dim;i++){fprintf(pf,\"%ld \",pInputs->$In_Name[i]);}"
				echo "	fprintf(pf,\"];\\n\");"
			fi
		fi
	fi
done
echo "	fprintf(pf,\"end\n\");"
echo "	fclose(pf);"
echo "	return 0;"
echo "}"
}

function GenerateGenCalInfoPython(){
	echo ""
len=${#Inputs_Name[@]}
cat <<_EOF
int GAPS_IO_GenCalInfoPython(char *filename,Gaps_IO_InputsContainer *pInputs)
{
	FILE *pf=fopen(filename,"w");	
	long i;
	fprintf(pf,"class CalInfo():\n");
_EOF

for((i=0;i<len;i++))
do
	In_Name=${Inputs_Name[i]}
	Dim=${Inputs_Dim[i]}
	if [ ${Inputs_Type[i]} == "char" ] 
	then
		echo "	fprintf(pf,\"\\t%s = \'%s\'\\n\", \"$In_Name\",pInputs->$In_Name);"
	else
		if [ $Dim == "1" ]
		then
			if [ ${Inputs_Type[i]} == "double" ] || [ ${Inputs_Type[i]} == "float" ]
			then
				echo "	fprintf(pf,\"\\t%s = %e\\n\", \"$In_Name\",pInputs->$In_Name);"
			else
				echo "	fprintf(pf,\"\\t%s = %ld\\n\", \"$In_Name\",pInputs->$In_Name);"
			fi
		else
			if [ ${Inputs_Type[i]} == "double" ] || [ ${Inputs_Type[i]} == "float" ]
			then
				echo "	fprintf(pf,\"\\t%s = [%e\",\"$In_Name\",pInputs->$In_Name[0]);"
				echo "	for(i=1;i<$Dim;i++){fprintf(pf,\",%e \",pInputs->$In_Name[i]);}"
				echo "	fprintf(pf,\"]\\n\");"
			else
				echo "	fprintf(pf,\"\\t%s = [%e\",\"$In_Name\",pInputs->$In_Name[0]);"
				echo "	for(i=1;i<$Dim;i++){fprintf(pf,\",%e \",pInputs->$In_Name[i]);}"
				echo "	fprintf(pf,\"]\\n\");"
			fi
		fi
	fi
done
echo "	fclose(pf);"
echo "	return 0;"
echo "}"
}

GenerateLoadLua2C> ${C_DIR}/IO_Tools.c
GenerateGenCalInfoMfile>> ${C_DIR}/IO_Tools.c
GenerateGenCalInfoPython>> ${C_DIR}/IO_Tools.c


###################### Electromagnetic field container
function Generate_EMField_Prototype(){
	echo "//This file is generated by Bash-script"
	echo ""
	len=${#EMField_Name[@]}

	for((i=0;i<len;i++))
	do
		echo "int GAPS_APT_Field_${EMField_Name[i]}(double *pTensor,double *pSpaceTime4,int Order,Gaps_IO_InputsContainer *pInputs);"
	done
}
Generate_EMField_Prototype > ${HEADER_DIR}/EMField_Prototype.h


function Generate_EMField_Set(){
	echo "//This file is generated by Bash-script"
	echo ""
	len=${#EMField_Name[@]}
cat <<_EOF
int GAPS_APT_SetFieldFunction(Gaps_APT_Particle *pPtc,Gaps_IO_InputsContainer *pInputs)
{
	int Type = pInputs->EMField_Type;
	if (-1 == Type)
	{
		pPtc->FieldFunc = GAPS_APT_Field_Discrete;
	}
_EOF

	for((i=0;i<len;i++))
	do
		echo "	else if($i == Type)"
		echo "	{"
		echo "		pPtc->FieldFunc = GAPS_APT_Field_${EMField_Name[i]};"		
		echo "	}"
	done

cat <<_EOF
	else
	{
		fprintf(stderr,"ERROR: In function GAPS_APT_SetFieldFunction: Electromagnetic field type is wrong! You input Field_Type = %ld\n",(long)Type);
	}
	return 0;
}
_EOF
}

Generate_EMField_Set> ${HEADER_DIR}/EMField_Set.h

function Generate_EMField_Doc(){
	echo "NOTE: This file includes all information of available EM field configurations."
	echo ""
	echo ""
	len=${#EMField_Name[@]}
	
	AvailType=""
	for((i=0;i<len;i++))
	do
		AvailType="${AvailType} $i"
	done

	echo "All the available values of EMField_Type are:"
	echo $AvailType
	echo ""
	echo ""
	echo "##########################################"
	echo ""
	echo ""

	for((i=0;i<len;i++))
	do
		echo "EMField_Type:		$i"
		echo "Name:				${EMField_Name[i]}"
		echo "Function Name:		GAPS_APT_Field_${EMField_Name[i]}"
		echo "Parameters:			${EMField_Parameter[i]}"
		echo "Note:				${EMField_Note[i]}"
		echo "Introduction:		${EMField_Info[i]}"
		echo "##########################################"
		echo ""
		echo ""
	done
}
Generate_EMField_Doc> ${DOC_DIR}/EMFields.txt

###################### External force container
function Generate_ExtForce_Prototype(){
	echo "//This file is generated by Bash-script"
	echo ""
	len=${#ExtForce_Name[@]}

	for((i=0;i<len;i++))
	do
		echo "int GAPS_APT_ExtForce_${ExtForce_Name[i]}(double *pField,Gaps_APT_Particle *pPtc,Gaps_IO_InputsContainer *pInputs);"
	done
}
Generate_ExtForce_Prototype> ${HEADER_DIR}/ExtForce_Prototype.h

function Generate_ExtForce_Set(){
	echo "//This file is generated by Bash-script"
	echo ""
	len=${#ExtForce_Name[@]}
cat <<_EOF
int GAPS_APT_SetExtForceInfo(Gaps_APT_Particle *pPtc,Gaps_IO_InputsContainer *pInputs)
{
	pPtc->num_forces=0;
	//Count force loaded
_EOF

	for((i=0;i<len;i++))
	do
		echo "	if(0!=pInputs->ExtForce_Cal_${ExtForce_Name[i]})"
		echo "	{"
		echo "		(pPtc->num_forces)++;"
		echo "	}"
	done

cat <<_EOF
	pPtc->ForceName= (char **)calloc((pPtc->num_forces),sizeof(char *));
	pPtc->ForceType= (int *)calloc((pPtc->num_forces),sizeof(int));

	//Set Force name and type
	int index=0;
_EOF

	for((i=0;i<len;i++))
	do
		echo "	if(0!=pInputs->ExtForce_Cal_${ExtForce_Name[i]})"
		echo "	{"
		echo "		pPtc->ForceName[index] = \"${ExtForce_Name[i]}\";"
		echo "		pPtc->ForceType[index] = $i;"
		echo "		index++;"
		echo "	}"
	done

cat <<_EOF
	return 0;
}
_EOF
}
Generate_ExtForce_Set> ${HEADER_DIR}/ExtForce_Set.h

function Generate_ExtForce_FuncContainer(){
	echo "//This file is generated by Bash-script"
	echo ""
	len=${#ExtForce_Name[@]}

	ExtForces=GAPS_APT_ExtForce_${ExtForce_Name[0]}
	for((i=1;i<len;i++))
	do
		ExtForces="${ExtForces},GAPS_APT_ExtForce_${ExtForce_Name[i]}"
	done

	echo "Gaps_APT_ExtForce Global_ExtForce_Container[${len}]={${ExtForces}};"
}
Generate_ExtForce_FuncContainer> ${HEADER_DIR}/ExtForce_FuncContainer.h

function Generate_ExtForce_Doc(){
	echo "NOTE: This file includes all information of available external non-EM force configurations."
	echo ""
	echo ""
	len=${#ExtForce_Name[@]}
	
	AvailType=""
	for((i=0;i<len;i++))
	do
		AvailType="${AvailType} $i"
	done

	echo "All the available values of ExtForce_Type are:"
	echo $AvailType
	echo ""
	echo ""
	echo "##########################################"
	echo ""
	echo ""

	for((i=0;i<len;i++))
	do
		echo "ExtForce_Type:		$i"
		echo "Name:				${ExtForce_Name[i]}"
		echo "Function Name:		GAPS_APT_ExtForce_${ExtForce_Name[i]}"
		echo "Parameters:			${ExtForce_Parameter[i]}"
		echo "Note:				${ExtForce_Note[i]}"
		echo "Introduction:		${ExtForce_Info[i]}"
		echo "##########################################"
		echo ""
		echo ""
	done
}
Generate_ExtForce_Doc> ${DOC_DIR}/ExtForces.txt

###################### Pusher container

function Generate_Pusher_Prototype(){
	echo "//This file is generated by Bash-script"
	echo ""
	len=${#Pusher_Name[@]}

	for((i=0;i<len;i++))
	do
		echo "int GAPS_APT_Pusher_${Pusher_Name[i]}(Gaps_APT_Particle *pPtc,Gaps_IO_InputsContainer *pInputs);"
	done
}
Generate_Pusher_Prototype > ${HEADER_DIR}/Pusher_Prototype.h


function Generate_Pusher_Set(){
	echo "//This file is generated by Bash-script"
	echo ""
	len=${#Pusher_Name[@]}
cat <<_EOF
int GAPS_APT_SetParticlePusher(Gaps_APT_ParticlePusher *pPusher,Gaps_IO_InputsContainer *pInputs)
{
	int Type = pInputs->Pusher_Type;
	if( Type<0 || Type >=$len)
	{
		fprintf(stderr,"ERROR: In function GAPS_APT_SetParticlePusher: Pusher type is wrong! You input Push_Type = %ld\n",(long)Type);
	}
	else
	{
_EOF

	for((i=0;i<len;i++))
	do
		echo "		if($i == Type)"
		echo "		{"
		echo "			*pPusher = GAPS_APT_Pusher_${Pusher_Name[i]};"		
		echo "		}"
	done

cat <<_EOF
	}
	return 0;
}
_EOF
}

Generate_Pusher_Set> ${HEADER_DIR}/Pusher_Set.h

function Generate_Pusher_Doc(){
	echo "NOTE: This file includes all information of available Pushers."
	echo ""
	echo ""
	len=${#Pusher_Name[@]}
	
	AvailType=""
	for((i=0;i<len;i++))
	do
		AvailType="${AvailType} $i"
	done

	echo "All the available values of Pusher_Type are:"
	echo $AvailType
	echo ""
	echo ""
	echo "##########################################"
	echo ""
	echo ""

	for((i=0;i<len;i++))
	do
		echo "Pusher_Type:		$i"
		echo "Name:				${Pusher_Name[i]}"
		echo "Function Name:		GAPS_APT_Pusher_${Pusher_Name[i]}"
		echo "Parameters:			${Pusher_Parameter[i]}"
		echo "Note:				${Pusher_Note[i]}"
		echo "Introduction:		${Pusher_Info[i]}"
		echo "##########################################"
		echo ""
		echo ""
	done
}
Generate_Pusher_Doc> ${DOC_DIR}/Pushers.txt

###################### Initialization container

function Generate_Init_Prototype(){
	echo "//This file is generated by Bash-script"
	echo ""
	len=${#Init_Name[@]}

	for((i=0;i<len;i++))
	do
		if [ ${Init_Class[i]} == "X" ]
		then
			echo "int GAPS_APT_SetParticlePosition_${Init_Name[i]}(Gaps_APT_Particle *pPtc,Gaps_IO_InputsContainer *pInputs);"
		elif [ ${Init_Class[i]} == "P" ]
		then
			echo "int GAPS_APT_SetParticleMomentum_${Init_Name[i]}(Gaps_APT_Particle *pPtc,Gaps_IO_InputsContainer *pInputs);"
		else
			echo "int GAPS_APT_SetParticleAcceleration_${Init_Name[i]}(Gaps_APT_Particle *pPtc,Gaps_IO_InputsContainer *pInputs);"
		fi
	done
}
Generate_Init_Prototype > ${HEADER_DIR}/Init_Prototype.h


function Generate_Init_Set_X(){
	echo "//This file is generated by Bash-script"
	echo ""
	len=${#Init_Name[@]}
cat <<_EOF
int GAPS_APT_SetParticlePosition(Gaps_APT_Particle *pPtc,Gaps_IO_InputsContainer *pInputs)
{
	double *pT=GAPS_APT_GetT1(pPtc);
	*pT= 0.;
_EOF
	declare -i j
	j=0
	for((i=0;i<len;i++))
	do
		if [ ${Init_Class[i]} == "X" ]
		then
			if [ $j == 0 ]
			then
				echo "	if(!(strcmp(pInputs->Init_X_Type,\"${Init_Name[i]}\")))"
			else
				echo "	else if(!(strcmp(pInputs->Init_X_Type,\"${Init_Name[i]}\")))"
			fi
			echo "	{"
			echo "		GAPS_APT_SetParticlePosition_${Init_Name[i]}(pPtc,pInputs);"		
			echo "	}"
			j=j+1
		fi
	done

cat <<_EOF
	else
	{
		fprintf(stderr,"ERROR: In function GAPS_APT_SetParticlePosition: Initial position type is wrong! You input Init_X_Type = %s\n",pInputs->Init_X_Type);
	}
	return 0;
}
_EOF
}

function Generate_Init_Set_P(){
	echo ""
	len=${#Init_Name[@]}
cat <<_EOF
int GAPS_APT_SetParticleMomentum(Gaps_APT_Particle *pPtc, Gaps_IO_InputsContainer *pInputs)
{
	double *pGamma=GAPS_APT_GetGamma1(pPtc);
	double *pP=GAPS_APT_GetP3(pPtc);
_EOF
	declare -i j
	j=0
	for((i=0;i<len;i++))
	do
		if [ ${Init_Class[i]} == "P" ]
		then
			if [ $j == 0 ]
			then
				echo "	if(!(strcmp(pInputs->Init_P_Type,\"${Init_Name[i]}\")))"
			else
				echo "	else if(!(strcmp(pInputs->Init_P_Type,\"${Init_Name[i]}\")))"
			fi
			echo "	{"
			echo "		GAPS_APT_SetParticleMomentum_${Init_Name[i]}(pPtc,pInputs);"		
			echo "	}"
			j=j+1;
		fi
	done

cat <<_EOF
	else
	{
		fprintf(stderr,"ERROR: In function GAPS_APT_SetParticleMomentum: Initial momentum type is wrong! You input Init_P_Type = %s\n",pInputs->Init_P_Type);
	}
	*pGamma=sqrt(1.+pP[0]*pP[0]+pP[1]*pP[1]+pP[2]*pP[2]);
	return 0;
}
_EOF
}

function Generate_Init_Set_Aclr(){
	echo ""
	len=${#Init_Name[@]}
cat <<_EOF
int GAPS_APT_SetParticleAcceleration(Gaps_APT_Particle *pPtc, Gaps_IO_InputsContainer *pInputs)
{
_EOF
	declare -i j
	j=0
	for((i=0;i<len;i++))
	do
		if [ ${Init_Class[i]} == "Aclr" ]
		then
			if [ $j == 0 ]
			then
				echo "	if(!(strcmp(pInputs->Init_Aclr_Type,\"${Init_Name[i]}\")))"
			else
				echo "	else if(!(strcmp(pInputs->Init_Aclr_Type,\"${Init_Name[i]}\")))"
			fi
			echo "	{"
			echo "		GAPS_APT_SetParticleAcceleration_${Init_Name[i]}(pPtc,pInputs);"		
			echo "	}"
			j=j+1;
		fi
	done

cat <<_EOF
	else
	{
		fprintf(stderr,"ERROR: In function GAPS_APT_SetParticleAcceleration: Initial acceleration type is wrong! You input Init_Aclr_Type = %s\n",pInputs->Init_Aclr_Type);
	}
	return 0;
}
_EOF
}
Generate_Init_Set_X > ${HEADER_DIR}/Init_Set.h
Generate_Init_Set_P >> ${HEADER_DIR}/Init_Set.h
Generate_Init_Set_Aclr >> ${HEADER_DIR}/Init_Set.h

function Generate_InitX_Doc(){
	echo "NOTE: This file includes all methods for initial positon sampling."
	echo ""
	echo ""
	len=${#Init_Name[@]}
	
	AvailType=""
	for((i=0;i<len;i++))
	do
		if [ ${Init_Class[i]} == "X" ]
		then
			AvailType="${AvailType} ${Init_Name[i]}"
		fi
	done

	echo "All the available values of Init_X_Type are:"
	echo $AvailType
	echo ""
	echo ""
	echo "##########################################"
	echo ""
	echo ""

	for((i=0;i<len;i++))
	do
		if [ ${Init_Class[i]} == "X" ]
		then
			echo "Init_X_Type:		${Init_Name[i]}"
			echo "Function Name:		GAPS_APT_SetParticlePostion_${Init_Name[i]}"
			echo "Parameters:			${Init_Parameter[i]}"
			echo "Note:				${Init_Note[i]}"
			echo "Introduction:		${Init_Info[i]}"
			echo "##########################################"
			echo ""
			echo ""
		fi
	done
}
function Generate_InitP_Doc(){
	echo "NOTE: This file includes all methods for initial momentum sampling."
	echo ""
	echo ""
	len=${#Init_Name[@]}
	
	AvailType=""
	for((i=0;i<len;i++))
	do
		if [ ${Init_Class[i]} == "P" ]
		then
			AvailType="${AvailType} ${Init_Name[i]}"
		fi
	done

	echo "All the available values of Init_P_Type are:"
	echo $AvailType
	echo ""
	echo ""
	echo "##########################################"
	echo ""
	echo ""

	for((i=0;i<len;i++))
	do
		if [ ${Init_Class[i]} == "P" ]
		then
			echo "Init_P_Type:		${Init_Name[i]}"
			echo "Function Name:		GAPS_APT_SetParticleMomentum_${Init_Name[i]}"
			echo "Parameters:			${Init_Parameter[i]}"
			echo "Note:				${Init_Note[i]}"
			echo "Introduction:		${Init_Info[i]}"
			echo "##########################################"
			echo ""
			echo ""
		fi
	done
}
function Generate_InitAclr_Doc(){
	echo "NOTE: This file includes all methods for initial acceleration sampling."
	echo ""
	echo ""
	len=${#Init_Name[@]}
	
	AvailType=""
	for((i=0;i<len;i++))
	do
		if [ ${Init_Class[i]} == "Aclr" ]
		then
			AvailType="${AvailType} ${Init_Name[i]}"
		fi
	done

	echo "All the available values of Init_Aclr_Type are:"
	echo $AvailType
	echo ""
	echo ""
	echo "##########################################"
	echo ""
	echo ""

	for((i=0;i<len;i++))
	do
		if [ ${Init_Class[i]} == "Aclr" ]
		then
			echo "Init_Aclr_Type:	${Init_Name[i]}"
			echo "Function Name:		GAPS_APT_SetParticleAcceleration_${Init_Name[i]}"
			echo "Parameters:			${Init_Parameter[i]}"
			echo "Note:				${Init_Note[i]}"
			echo "Introduction:		${Init_Info[i]}"
			echo "##########################################"
			echo ""
			echo ""
		fi
	done
}
Generate_InitX_Doc> ${DOC_DIR}/Initialization/Position.txt
Generate_InitP_Doc> ${DOC_DIR}/Initialization/Momentum.txt
Generate_InitAclr_Doc> ${DOC_DIR}/Initialization/Acceleration.txt
