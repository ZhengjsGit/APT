#!/bin/bash
# Program:
#	This program generates All the header-files need by APT.

#Version v1.0

#Contact
#Author: Yulei Wang	E-mail: wyulei@mail.ustc.edu.cn

#History
#2015/06/20	Rainthunder	First release


function Add_Inputs(){
	len=${#Inputs_Name[@]}
	if [ $1 == "NUM" ]
	then
		Inputs_LEN[${len}]="$1"
		Inputs_Type[${len}]="$2"
		Array_Len[${len}]=""
		Inputs_Name[${len}]="$3"
		Inputs_Info[${len}]="$4"
	elif [ $1 == "ARRAY" ]
	then
		Inputs_LEN[${len}]="$1"
		Inputs_Type[${len}]="$2"
		Array_Len[${len}]="[$3]"
		Inputs_Name[${len}]="$4"
		Inputs_Info[${len}]="$5"
	elif [ $1 == "FUNC" ]
	then
		Inputs_LEN[${len}]="$1"
		Inputs_Type[${len}]="$3" 
		Array_Len[${len}]="$4" 
		Inputs_Name[${len}]="$5" 
		Inputs_Info[${len}]="$6"
	else
		echo "You have set a wrong type of input"
	fi
}
###########################################################################################
###                                 Add Inputs here!                                    ###
###########################################################################################

#			INPUTS		Type		Name			Information
Add_Inputs	"NUM"		"double"	"B0"		 	"Characteristic Magnetic Field Intensity (T)"
Add_Inputs	"NUM"		"size_t"	"num_steps"	 	"Number of steps you want to calculation"
Add_Inputs	"NUM"		"long"		"num_people"	"Number of people on the earth"

#			INPUTS		Type		Dims		Name			Information
Add_Inputs	"ARRAY"		"double"	"3"			"x0"		 	"Initial position (m); x0={x,y,z}"
Add_Inputs	"ARRAY"		"char"		"100"		"OutputName" 	"Name of the output file"

#			INPUTS		Type		Input_Num	Output_Num		Name			Information
Add_Inputs	"FUNC"		""			"3"			"3"				"Func_B"		"Function of magnetic field"
CONFIG_DIR="./InputTools"
HEADER_DIR="./InputTools"
C_DIR="./InputTools"
# Generate configuration files
function GenerateInputsInfo(){
	len=${#Inputs_Name[@]}
	echo "/*This file is generated by Bash-script.*/"
	echo ""

	echo "In this file, you can find the introductions for all the inputs:"
	echo ""
	echo ""
	for (( i=0;i<len;i++ ))
	do
		if [ ${Inputs_LEN[i]} == "ARRAY" ]
		then
			if [ ${Inputs_Type[i]} == "char" ]
			then
				Dim=${Array_Len[i]#[}
				Dim=${Dim%]}
				echo "Name:	${Inputs_Name[i]}"
				echo "Type:	${Inputs_Type[i]}	"
				echo "Length: This is a string! Its maxium length is ${Dim}!"
				echo "Information:	${Inputs_Info[i]}"
				echo "#########################################################"
				echo ""
				echo ""
			else
				Dim=${Array_Len[i]#[}
				Dim=${Dim%]}
				echo "Name:	${Inputs_Name[i]}"
				echo "Type:	${Inputs_Type[i]}	"
				echo "Length: A ${Dim}-D array"
				echo "Information:	${Inputs_Info[i]}"
				echo "#########################################################"
				echo ""
				echo ""
			fi
		elif [ ${Inputs_LEN[i]} == "FUNC" ]
		then
			echo "Name:	${Inputs_Name[i]}"
			echo "Type:	Function: ${Inputs_Type[i]} inputs, ${Array_Len[i]} outputs "
			echo "Information:	${Inputs_Info[i]}"
			echo "#########################################################"
			echo ""
			echo ""
		else
			echo "Name:	${Inputs_Name[i]}"
			echo "Type:	${Inputs_Type[i]}	"
			echo "Length: It is just a number"
			echo "Information:	${Inputs_Info[i]}"
			echo "#########################################################"
			echo ""
			echo ""
		fi
	done
}

GenerateInputsInfo > ${CONFIG_DIR}/Inputs_Information.txt

function GenerateDeflautConfig(){
	echo "--This file is generated by Bash-script"
	echo ""
	len=${#Inputs_Name[@]}
	for (( i=0;i<len;i++ ))
	do
		if [ ${Inputs_Type[i]} == "char" ]
		then
			echo "${Inputs_Name[i]} = \"233\";";
		elif [ ${Inputs_LEN[i]} == "ARRAY" ]
		then
			echo "${Inputs_Name[i]} = {0,0,0};";
		elif [ ${Inputs_LEN[i]} == "FUNC" ]
		then
			echo "function ${Inputs_Name[i]} (arg1,arg2)";
			echo "--";
			echo "--	Function Body";
			echo "--";
			echo "	return out1, out2"
			echo "end"
		else
			echo "${Inputs_Name[i]} = 0;"
		fi
	done
}

GenerateDeflautConfig > ${CONFIG_DIR}/Config_template.lua

## generate headers and functions

function GenerateInputStruct(){
	echo "/*This file is generated by Bash-script.*/"
	echo ""
	echo "typedef struct{"

	len=${#Inputs_Name[@]}
	for (( i=0;i<len;i++ ))
	do
		if [ ${Inputs_LEN[i]} == "ARRAY" ]
		then
			echo "${Inputs_Type[i]} ${Inputs_Name[i]}${Array_Len[i]};";
		elif [ ${Inputs_LEN[i]} == "FUNC" ]
		then
			echo ""
		else
			echo "${Inputs_Type[i]} ${Inputs_Name[i]};"
		fi
	done
	echo "}Gaps_IO_InputsContainer;"
	echo ""
	echo "int GAPS_IO_LoadLua2C(Gaps_IO_LuaInputEnv *pLuaenv,Gaps_IO_InputsContainer *pInputs);"
	echo "int GAPS_IO_GenCalInfoMfile(char *filename,Gaps_IO_InputsContainer *pInputs);"

}

GenerateInputStruct > ${HEADER_DIR}/IO_Tools.h


function GenerateLoadLua2C(){
	echo "/*This file is generated by Bash-script.*/"
	echo ""
len=${#Inputs_Name[@]}
cat <<_EOF
#include <stdio.h>
#include <stdlib.h>
#include "lua.h"
#include "lualib.h"
#include "lauxlib.h"
#include "gapsio.h"
#include "IO_Tools.h"
int GAPS_IO_LoadLua2C(Gaps_IO_LuaInputEnv *pLuaenv,Gaps_IO_InputsContainer *pInputs)
{
_EOF

for((i=0;i<len;i++))
do
if [ ${Inputs_LEN[i]} == "ARRAY" ] || [ ${Inputs_LEN[i]} == "NUM" ]
then
	if [ ${Inputs_LEN[i]} == "ARRAY" ] 
	then
		if [ ${Inputs_Type[i]} == "char" ]
		then
			ovar="pInputs->${Inputs_Name[i]}"
			ToCtype=string
		else
			Dim=${Array_Len[i]#[}
			Dim=${Dim%]}
			ovar="${Dim},pInputs->${Inputs_Name[i]}"
			ToCtype=table
		fi
	else
		ToCtype=${Inputs_Type[i]}
		ovar="&(pInputs->${Inputs_Name[i]})"
	fi

	if [ ${Inputs_Type[i]} == "int" ] || [ ${Inputs_Type[i]} == "long" ] || [ ${Inputs_Type[i]} == "size_t" ]
	then
		ToCtype="long"
	fi

cat <<_EOF
	GAPS_IO_Load_${ToCtype}(pLuaenv,"${Inputs_Name[i]}",$ovar);
_EOF
fi
done
echo "return 0;"
echo "}"
}



function GenerateGenCalInfoMfile(){
	echo ""
len=${#Inputs_Name[@]}
cat <<_EOF
int GAPS_IO_GenCalInfoMfile(char *filename,Gaps_IO_InputsContainer *pInputs)
{
	FILE *pf=fopen(filename,"w");	
	long i;
	fprintf(pf,"function y=GAPS_IO_LoadCalInfo()\n");
_EOF

for((i=0;i<len;i++))
do
	In_Name=${Inputs_Name[i]}
	Dim=${Array_Len[i]#[}
	Dim=${Dim%]}
if [ ${Inputs_LEN[i]} == "ARRAY" ] || [ ${Inputs_LEN[i]} == "NUM" ]
then
	if [ ${Inputs_LEN[i]} == "ARRAY" ] 
	then
		if [ ${Inputs_Type[i]} == "char" ]
		then
			echo "fprintf(pf,\"y.%s = \'%s\';\\n\", \"$In_Name\",pInputs->$In_Name);"
		else
			echo "fprintf(pf,\"y.%s = [\",\"$In_Name\");"
			echo "for(i=0;i<$Dim;i++){";
			echo "fprintf(pf,\"%e \",pInputs->$In_Name[i]);}"
			echo "fprintf(pf,\"];\\n\");"
		fi
	elif [ ${Inputs_Type[i]} == "double" ]
	then
		echo "fprintf(pf,\"y.%s = %e;\\n\", \"$In_Name\",pInputs->$In_Name);"
	elif [ ${Inputs_Type[i]} == "int" ] || [ ${Inputs_Type[i]} == "long" ] || [ ${Inputs_Type[i]} == "size_t" ]
	then
		echo "fprintf(pf,\"y.%s = %ld;\\n\", \"$In_Name\",pInputs->$In_Name);"
	fi
fi
done
echo "fprintf(pf,\"end\n\");"
echo "return 0;"
echo "}"
}

GenerateLoadLua2C> ${C_DIR}/IO_Tools.c
GenerateGenCalInfoMfile>> ${C_DIR}/IO_Tools.c

