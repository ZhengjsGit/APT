#include "APT_AllHeaders.h"

int GAPS_APT_Field_Uniform(double *pTensor,double *pSpaceTime4,int Order,Gaps_IO_InputsContainer *pInputs)
{	

//	printf("EMType=%d\n",pInputs->EMField_Type);
	/**Step 1: Set the maximum tensor order**/
	int MaxOrder = 3;

	/**Step 2: Declare and calculate intermediate variables**/
	double TT=pSpaceTime4[0],XX=pSpaceTime4[1],YY=pSpaceTime4[2],ZZ=pSpaceTime4[3];
	double sinTheta=sin(pInputs->EMField_Uniform_AngleEB);
	double cosTheta=cos(pInputs->EMField_Uniform_AngleEB);
	double B0=pInputs->EMField_B0;
	double E0=pInputs->EMField_E0;

	/**Step 3: Calculate EB**/
	if(-1 == Order)
	{
		if(pInputs->EMField_Cal_E)
		{
			//Calculate E and assign values to pTensor[0]~pTensor[2]
			pTensor[0]	=  0.;
			pTensor[1]	=  E0*sinTheta;
			pTensor[2]	=  E0*cosTheta;
		}	
		if(pInputs->EMField_Cal_B)
		{
			//Calculate B and assign values to pTensor[3]~pTensor[5]
			pTensor[3] = 0.;
			pTensor[4] = 0.;
			pTensor[5] = B0;
		}		
	}
	/**Step 4: Calculate 4-vector-potential**/
	if(1 == Order)
	{
		//Calculate A and assign values to pTensor[0]~pTensor[3]
		pTensor[0]=0.;//\phi=0
		pTensor[1]=-B0/2.*YY;//Ax
		pTensor[2]=B0/2.*XX-E0*TT*sinTheta;//Ay
		pTensor[3]=-1.*E0*TT*cosTheta;//Az
	}

	if(2 == Order)
	{
		int i,j;
		double *elm;
		for(i=0;i<4;i++)
		{
			for(j=0;j<4;j++)
			{
				int idx[2]={i,j};
				elm=GAPS_APT_TensorPointer(pTensor,idx,4,2);
				if(i==1 && j==2)
				{
					*elm = -B0/2;		
				}
				else if(i==2 && j==1)
				{
					*elm =B0/2;		
				}
				else if(i==3 && j==0)
				{
					*elm =-1*E0;		
				}
				else
				{
					*elm =0;		
				}
			}
		}

	}

	if(3 == Order)
	{
		int i;
		for(i=0;i<64;i++) pTensor[i]=0.;
	}
	/**Step 5: Error detection**/
	if(MaxOrder<Order)
	{
		fprintf(stderr,"ERROR: In function GAPS_APT_Field_<Name>. This field function does NOT support tensor order larger than %d.\n",MaxOrder);
	}
	return 0; 
}

